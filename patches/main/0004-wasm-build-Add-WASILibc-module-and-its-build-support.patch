From 23fab7c10bc4a2179a6c4ca3e93ae385bc1e73b0 Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Wed, 7 Jun 2023 17:58:49 +0000
Subject: [PATCH] [wasm][build] Add WASILibc module and its build support

[wasi-libc](https://github.com/WebAssembly/wasi-libc) is a libc
implementation widely used in WASI toolchains. This patch adds a new
Swift and C module for it to import and use it in Swift code. This
module is intentionally separate from the existing `Glibc` module
because wasi-libc is actually based on musl libc.
---
 stdlib/public/Platform/CMakeLists.txt         |  51 ++++--
 stdlib/public/Platform/SwiftWASILibc.h.gyb    | 126 ++++++++++++++
 stdlib/public/Platform/WASILibc.swift.gyb     | 161 ++++++++++++++++++
 .../public/Platform/wasi-libc.modulemap.gyb   |  18 ++
 4 files changed, 343 insertions(+), 13 deletions(-)
 create mode 100644 stdlib/public/Platform/SwiftWASILibc.h.gyb
 create mode 100644 stdlib/public/Platform/WASILibc.swift.gyb
 create mode 100644 stdlib/public/Platform/wasi-libc.modulemap.gyb

diff --git a/stdlib/public/Platform/CMakeLists.txt b/stdlib/public/Platform/CMakeLists.txt
index f478206d6a2..6dbfee2f253 100644
--- a/stdlib/public/Platform/CMakeLists.txt
+++ b/stdlib/public/Platform/CMakeLists.txt
@@ -98,6 +98,23 @@ add_swift_target_library(swiftGlibc ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_O
     INSTALL_IN_COMPONENT sdk-overlay
     DEPENDS glibc_modulemap)
 
+add_swift_target_library(swiftWASILibc ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
+    ${swift_platform_sources}
+    POSIXError.swift
+
+    GYB_SOURCES
+      ${swift_platform_gyb_sources}
+      WASILibc.swift.gyb
+
+    SWIFT_COMPILE_FLAGS
+      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}
+      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
+      ${swift_platform_compile_flags}
+    LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
+    TARGET_SDKS WASI
+    INSTALL_IN_COMPONENT sdk-overlay
+    DEPENDS glibc_modulemap)
+
 add_swift_target_library(swiftCRT ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
     ucrt.swift
     ${swift_platform_sources}
@@ -117,23 +134,31 @@ add_swift_target_library(swiftCRT ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVE
 
 set(glibc_modulemap_target_list)
 foreach(sdk ${SWIFT_SDKS})
-  if(NOT "${sdk}" STREQUAL "LINUX" AND
-     NOT "${sdk}" STREQUAL "FREEBSD" AND
-     NOT "${sdk}" STREQUAL "OPENBSD" AND
-     NOT "${sdk}" STREQUAL "ANDROID" AND
-     NOT "${sdk}" STREQUAL "CYGWIN" AND
-     NOT "${sdk}" STREQUAL "HAIKU")
+  if("${sdk}" STREQUAL "LINUX" OR
+     "${sdk}" STREQUAL "FREEBSD" OR
+     "${sdk}" STREQUAL "OPENBSD" OR
+     "${sdk}" STREQUAL "ANDROID" OR
+     "${sdk}" STREQUAL "CYGWIN" OR
+     "${sdk}" STREQUAL "HAIKU")
+    set(glibc_modulemap_source "glibc.modulemap.gyb")
+    set(glibc_header_source "SwiftGlibc.h.gyb")
+  elseif("${sdk}" STREQUAL "WASI")
+    set(glibc_modulemap_source "wasi-libc.modulemap.gyb")
+    set(glibc_header_source "SwiftWASILibc.h.gyb")
+  else()
     continue()
   endif()
 
+  string(REGEX REPLACE "\\.gyb$" "" glibc_modulemap_outname "${glibc_modulemap_source}")
+  string(REGEX REPLACE "\\.gyb$" "" glibc_header_outname "${glibc_header_source}")
+
   foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})
     set(arch_subdir "${SWIFT_SDK_${sdk}_LIB_SUBDIR}/${arch}")
     set(module_dir "${SWIFTLIB_DIR}/${arch_subdir}")
     set(module_dir_static "${SWIFTSTATICLIB_DIR}/${arch_subdir}")
 
-    set(glibc_modulemap_source "glibc.modulemap.gyb")
-    set(glibc_modulemap_out "${module_dir}/glibc.modulemap")
-    set(glibc_modulemap_out_static "${module_dir_static}/glibc.modulemap")
+    set(glibc_modulemap_out "${module_dir}/${glibc_modulemap_outname}")
+    set(glibc_modulemap_out_static "${module_dir_static}/${glibc_modulemap_outname}")
 
     # Configure the module map based on the target. Each platform needs to
     # reference different headers, based on what's available in their glibc.
@@ -147,10 +172,10 @@ foreach(sdk ${SWIFT_SDKS})
 
     list(APPEND glibc_modulemap_target_list ${glibc_modulemap_target})
 
-    set(glibc_header_out "${module_dir}/SwiftGlibc.h")
-    set(glibc_header_out_static "${module_dir_static}/SwiftGlibc.h")
+    set(glibc_header_out "${module_dir}/${glibc_header_outname}")
+    set(glibc_header_out_static "${module_dir_static}/${glibc_header_outname}")
     handle_gyb_source_single(glibc_header_target
-        SOURCE "SwiftGlibc.h.gyb"
+        SOURCE "${glibc_header_source}"
         OUTPUT "${glibc_header_out}"
         FLAGS "-DCMAKE_SDK=${sdk}")
     list(APPEND glibc_modulemap_target_list ${glibc_header_target})
@@ -181,7 +206,7 @@ foreach(sdk ${SWIFT_SDKS})
     # prefix. This is the one we'll install instead.
     if(NOT "${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_ARCH_${arch}_PATH}" STREQUAL "/" AND
        NOT (${sdk} STREQUAL ANDROID AND NOT "${SWIFT_ANDROID_NATIVE_SYSROOT}" STREQUAL ""))
-      set(glibc_sysroot_relative_modulemap_out "${module_dir}/sysroot-relative-modulemaps/glibc.modulemap")
+      set(glibc_sysroot_relative_modulemap_out "${module_dir}/sysroot-relative-modulemaps/${glibc_modulemap_outname}")
 
       handle_gyb_source_single(glibc_modulemap_native_target
         SOURCE "${glibc_modulemap_source}"
diff --git a/stdlib/public/Platform/SwiftWASILibc.h.gyb b/stdlib/public/Platform/SwiftWASILibc.h.gyb
new file mode 100644
index 00000000000..c051627f2b7
--- /dev/null
+++ b/stdlib/public/Platform/SwiftWASILibc.h.gyb
@@ -0,0 +1,126 @@
+%{
+headers = [
+  'stdc-predef.h',
+  'features.h',
+
+  # C standard library
+  'complex.h',
+  'ctype.h',
+  'errno.h',
+  'fenv.h',
+  'float.h',
+  'inttypes.h',
+  'iso646.h',
+  'libutil.h',
+  'limits.h',
+  'locale.h',
+  'math.h',
+  'pty.h',
+  # setjmp/longjmp is not available
+  # 'setjmp.h',
+  'signal.h',
+  'stdarg.h',
+  'stdbool.h',
+  'stddef.h',
+  'stdint.h',
+  'stdio.h',
+  'stdlib.h',
+  'string.h',
+  'tgmath.h',
+  'time.h',
+  'util.h',
+  'utmp.h',
+
+  # POSIX
+  'aio.h',
+  'arpa/inet.h',
+  'bsd/ifaddrs.h',
+  'bsd/pty.h',
+  'cpio.h',
+  'dirent.h',
+  'dlfcn.h',
+  'fcntl.h',
+  'fmtmsg.h',
+  'fnmatch.h',
+  'ftw.h',
+  'glob.h',
+  'grp.h',
+  'iconv.h',
+  'ifaddrs.h',
+  'langinfo.h',
+  'libgen.h',
+  'link.h',
+  'monetary.h',
+  'net/if.h',
+  'netdb.h',
+  'netinet/in.h',
+  'netinet/tcp.h',
+  'nl_types.h',
+  'poll.h',
+  'pthread.h',
+  'pwd.h',
+  'regex.h',
+  'sched.h',
+  'search.h',
+  'semaphore.h',
+  'spawn.h',
+  'strings.h',
+  'sys/event.h',
+  'sys/file.h',
+  'sys/inotify.h',
+  'sys/ioctl.h',
+  'sys/ipc.h',
+  'sys/mman.h',
+  'sys/mount.h',
+  'sys/msg.h',
+  'sys/resource.h',
+  'sys/select.h',
+  'sys/sem.h',
+  'sys/sendfile.h',
+  'sys/shm.h',
+  'sys/socket.h',
+  'sys/stat.h',
+  'sys/statvfs.h',
+  'sys/time.h',
+  'sys/times.h',
+  'sys/types.h',
+  'sys/uio.h',
+  'sys/un.h',
+  'sys/user.h',
+  'sys/utsname.h',
+  'sys/wait.h',
+  'sysexits.h',
+  'syslog.h',
+  'tar.h',
+  'termios.h',
+  'ulimit.h',
+  'unistd.h',
+  'utime.h',
+  'utmpx.h',
+  'wait.h',
+  'wordexp.h',
+
+  # WASI specific
+  'wasi/api.h',
+]
+}%
+
+// FIXME?(katei):
+// Those emulations are now enabled by default to have compatibility
+// with other platforms as much as possible without any extra modification.
+// But we should consider moving them into their own submodules.
+#ifndef _WASI_EMULATED_MMAN
+#  define _WASI_EMULATED_MMAN
+#endif
+#ifndef _WASI_EMULATED_SIGNAL
+#  define _WASI_EMULATED_SIGNAL
+#endif
+#ifndef _WASI_EMULATED_PROCESS_CLOCKS
+#  define _WASI_EMULATED_PROCESS_CLOCKS
+#endif
+
+% for header in headers:
+#if __has_include(<${header}>)
+#include <${header}>
+#endif
+% end
diff --git a/stdlib/public/Platform/WASILibc.swift.gyb b/stdlib/public/Platform/WASILibc.swift.gyb
new file mode 100644
index 00000000000..bd6e03ed3c4
--- /dev/null
+++ b/stdlib/public/Platform/WASILibc.swift.gyb
@@ -0,0 +1,161 @@
+//===----------------------------------------------------------------------===//
+//
+// This source file is part of the Swift.org open source project
+//
+// Copyright (c) 2020 Apple Inc. and the Swift project authors
+// Licensed under Apache License v2.0 with Runtime Library Exception
+//
+// See https://swift.org/LICENSE.txt for license information
+// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
+//
+//===----------------------------------------------------------------------===//
+
+@_exported import SwiftWASILibc // Clang module
+
+//  Constants defined by <math.h>
+@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
+public let M_PI = Double.pi
+
+@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
+public let M_PI_2 = Double.pi / 2
+
+@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
+public let M_PI_4 = Double.pi / 4
+
+@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
+public let M_SQRT2 = 2.squareRoot()
+
+@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
+public let M_SQRT1_2 = 0.5.squareRoot()
+
+//  Constants defined by <float.h>
+@available(swift, deprecated: 3.0, message: "Please use 'T.radix' to get the radix of a FloatingPoint type 'T'.")
+public let FLT_RADIX = Double.radix
+
+%for type, prefix in [('Float', 'FLT'), ('Double', 'DBL')]:
+//  Where does the 1 come from? C counts the usually-implicit leading
+//  significand bit, but Swift does not. Neither is really right or wrong.
+@available(swift, deprecated: 3.0, message: "Please use '${type}.significandBitCount + 1'.")
+public let ${prefix}_MANT_DIG = ${type}.significandBitCount + 1
+
+//  Where does the 1 come from? C models floating-point numbers as having a
+//  significand in [0.5, 1), but Swift (following IEEE 754) considers the
+//  significand to be in [1, 2). This rationale applies to ${prefix}_MIN_EXP
+//  as well.
+@available(swift, deprecated: 3.0, message: "Please use '${type}.greatestFiniteMagnitude.exponent + 1'.")
+public let ${prefix}_MAX_EXP = ${type}.greatestFiniteMagnitude.exponent + 1
+
+@available(swift, deprecated: 3.0, message: "Please use '${type}.leastNormalMagnitude.exponent + 1'.")
+public let ${prefix}_MIN_EXP = ${type}.leastNormalMagnitude.exponent + 1
+
+@available(swift, deprecated: 3.0, message: "Please use '${type}.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
+public let ${prefix}_MAX = ${type}.greatestFiniteMagnitude
+
+@available(swift, deprecated: 3.0, message: "Please use '${type}.ulpOfOne' or '.ulpOfOne'.")
+public let ${prefix}_EPSILON = ${type}.ulpOfOne
+
+@available(swift, deprecated: 3.0, message: "Please use '${type}.leastNormalMagnitude' or '.leastNormalMagnitude'.")
+public let ${prefix}_MIN = ${type}.leastNormalMagnitude
+
+@available(swift, deprecated: 3.0, message: "Please use '${type}.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
+public let ${prefix}_TRUE_MIN = ${type}.leastNonzeroMagnitude
+
+%end
+
+public let MAP_FAILED: UnsafeMutableRawPointer! = UnsafeMutableRawPointer(bitPattern: -1)
+
+// TODO: wasi-libc's error.h defines these macros as function-like macros, which
+// Swift can't import for now.
+%{
+posix_error_codes = [
+  "E2BIG",
+  "EACCES",
+  "EADDRINUSE",
+  "EADDRNOTAVAIL",
+  "EAFNOSUPPORT",
+  "EAGAIN",
+  "EALREADY",
+  "EBADF",
+  "EBADMSG",
+  "EBUSY",
+  "ECANCELED",
+  "ECHILD",
+  "ECONNABORTED",
+  "ECONNREFUSED",
+  "ECONNRESET",
+  "EDEADLK",
+  "EDESTADDRREQ",
+  "EDOM",
+  "EDQUOT",
+  "EEXIST",
+  "EFAULT",
+  "EFBIG",
+  "EHOSTUNREACH",
+  "EIDRM",
+  "EILSEQ",
+  "EINPROGRESS",
+  "EINTR",
+  "EINVAL",
+  "EIO",
+  "EISCONN",
+  "EISDIR",
+  "ELOOP",
+  "EMFILE",
+  "EMLINK",
+  "EMSGSIZE",
+  "EMULTIHOP",
+  "ENAMETOOLONG",
+  "ENETDOWN",
+  "ENETRESET",
+  "ENETUNREACH",
+  "ENFILE",
+  "ENOBUFS",
+  "ENODEV",
+  "ENOENT",
+  "ENOEXEC",
+  "ENOLCK",
+  "ENOLINK",
+  "ENOMEM",
+  "ENOMSG",
+  "ENOPROTOOPT",
+  "ENOSPC",
+  "ENOSYS",
+  "ENOTCONN",
+  "ENOTDIR",
+  "ENOTEMPTY",
+  "ENOTRECOVERABLE",
+  "ENOTSOCK",
+  "ENOTSUP",
+  "ENOTTY",
+  "ENXIO",
+  "EOVERFLOW",
+  "EOWNERDEAD",
+  "EPERM",
+  "EPIPE",
+  "EPROTO",
+  "EPROTONOSUPPORT",
+  "EPROTOTYPE",
+  "ERANGE",
+  "EROFS",
+  "ESPIPE",
+  "ESRCH",
+  "ESTALE",
+  "ETIMEDOUT",
+  "ETXTBSY",
+  "EXDEV",
+  "ENOTCAPABLE",
+]
+}%
+
+%for ecode in posix_error_codes:
+
+@available(*, deprecated, message: "Please use 'POSIXErrorCode.${ecode}'.")
+public let ${ecode} = POSIXErrorCode.${ecode}.rawValue
+
+%end
+
+// TODO: wasi-libc's _seek.h defines these macros as function-like macros, which
+// Swift can't import for now.
+public let SEEK_SET: Int32 = 0
+public let SEEK_CUR: Int32 = 1
+public let SEEK_END: Int32 = 2
diff --git a/stdlib/public/Platform/wasi-libc.modulemap.gyb b/stdlib/public/Platform/wasi-libc.modulemap.gyb
new file mode 100644
index 00000000000..59be5d56499
--- /dev/null
+++ b/stdlib/public/Platform/wasi-libc.modulemap.gyb
@@ -0,0 +1,18 @@
+//===--- wasi-libc.modulemap.gyb ------------------------------------------===//
+//
+// This source file is part of the Swift.org open source project
+//
+// Copyright (c) 2020 Apple Inc. and the Swift project authors
+// Licensed under Apache License v2.0 with Runtime Library Exception
+//
+// See https://swift.org/LICENSE.txt for license information
+// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
+//
+//===----------------------------------------------------------------------===//
+
+module SwiftWASILibc [system] {
+  // C standard library
+  header "SwiftWASILibc.h"
+
+  export *
+}
-- 
2.40.0

