#!/usr/bin/env python3

import os
import json
import subprocess
import urllib.request


def latest_build(swift_webroot):
    latest_build_endpoint = f"{swift_webroot}/latest-build.yml"
    with urllib.request.urlopen(latest_build_endpoint) as response:
        yaml_content = response.read().decode('utf-8')
        for line in yaml_content.splitlines():
            if line.startswith("dir: "):
                return line.split(" ")[1]
    return None


def replace_file_content(path: str, target: str, replacement: str):
    with open(path, 'r') as file:
        filedata = file.read()

    filedata = filedata.replace(target, replacement)

    with open(path, 'w') as file:
        file.write(filedata)


def open_pr_to_update_base_tag(scheme: str, base_tag: str, latest_tag: str):
    subprocess.check_call(
        ["git", "checkout",
         "-b", f"update-base-tag-{scheme}-{latest_tag}", "main"])

    replace_file_content(f"schemes/{scheme}/manifest.json",
                         base_tag, latest_tag)
    subprocess.check_call(["git", "add", f"schemes/{scheme}/manifest.json"])
    subprocess.check_call(
        ["git", "commit",
         "-m", f"Update base tag for {scheme} to {latest_tag}"])
    subprocess.check_call(
        ["git", "push", "origin", f"update-base-tag-{scheme}-{latest_tag}"])
    subprocess.check_call([
        "gh", "pr", "create", "--web",
        "--title", f"Update base tag for {scheme} to {latest_tag}",
        "--body", f"Update base tag for {scheme} to {latest_tag}",
        "--base", "main", "--head", f"update-base-tag-{scheme}-{latest_tag}"])
    subprocess.check_call(["git", "checkout", "-"])


REPO_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def check_latest_build(scheme: str):
    scheme_manifest = os.path.join(
        REPO_ROOT, "schemes", scheme, "manifest.json")
    with open(scheme_manifest) as f:
        manifest = json.load(f)
    swift_webroot = (
        "https://download.swift.org"
        f"/{manifest['swift-org-download-channel']}/ubuntu2204")
    base_tag = manifest["base-tag"]
    latest_tag = latest_build(swift_webroot)
    if base_tag != latest_tag:
        open_pr_to_update_base_tag(scheme, base_tag, latest_tag)


def main():
    for scheme in os.listdir(os.path.join(REPO_ROOT, "schemes")):
        check_latest_build(scheme)


if __name__ == '__main__':
    main()
