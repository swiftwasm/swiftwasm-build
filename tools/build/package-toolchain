#!/usr/bin/env python3

import sys
import os
import argparse
import datetime
import re
from build_support.actions import Action, ActionRunner, DownloadBaseSnapshotAction, derive_options_from_args


SDK_GENERATOR_PKG_PATH = os.path.join(
    os.path.dirname(__file__), "..", "..", "..", "swift-sdk-generator")


class SnapshotInfo:
    def __init__(self, year: int, month: int, day: int, swift_version: str, artifact_name: str, daily_snapshot: bool):
        self.year = year
        self.month = month
        self.day = day
        self.swift_version = swift_version
        self.artifact_name = artifact_name
        self.daily_snapshot = daily_snapshot

    @property
    def artifactbundle_zip_name(self):
        return f"{self.artifact_name}.artifactbundle.zip"


def derive_wasi_sysroot(options, packaging_dir: str, target_triple: str) -> str:
    if options.download_wasi_sysroot:
        return os.path.join('..', 'build-sdk', 'wasi-sysroot')
    else:
        return os.path.join(packaging_dir, 'wasi-sysroot', target_triple)


def copy_icu_libs(scheme, build_sdk_path, dist_toolchain_path, target_triple):
    if scheme not in ["release-5.9", "release-5.10", "release-6.0"]:
        # We don't need to copy ICU libraries for recent channels
        return
    import shutil
    icu_lib_dir = os.path.join(build_sdk_path, f"icu-{target_triple}", 'lib')
    if not os.path.exists(icu_lib_dir):
        icu_lib_dir = os.path.join(build_sdk_path, 'icu', 'lib')

    dest_dir = os.path.join(
        dist_toolchain_path, 'usr', 'lib', 'swift_static', 'wasi')
    print("=====> Copying ICU libraries from {}".format(icu_lib_dir))
    icu_libs = ["libicuuc.a", "libicui18n.a", "libicudata.a"]
    for lib in icu_libs:
        dest_path = os.path.join(dest_dir, lib)
        shutil.copy(os.path.join(icu_lib_dir, lib), dest_path)


def copy_libxml2_libs(build_sdk_path, dist_toolchain_path, target_triple):
    import shutil
    lib_dir = os.path.join(build_sdk_path, f"libxml2-{target_triple}", 'lib')
    if not os.path.exists(lib_dir):
        lib_dir = os.path.join(build_sdk_path, 'libxml2', 'lib')

    dest_dir = os.path.join(
        dist_toolchain_path, 'usr', 'lib', 'swift_static', 'wasi')
    print("=====> Copying libxml2 libraries from {}".format(lib_dir))
    for lib in ["libxml2.a"]:
        dest_path = os.path.join(dest_dir, lib)
        shutil.copy(os.path.join(lib_dir, lib), dest_path)


class PackageSwiftSDKAction(Action):
    def __init__(
        self, options, snapshot_info: SnapshotInfo,
        target_toolchain_path: str,
        wasi_sysroot_path: str,
        swift_sdk_name: str,
        target_triple: str,
    ):
        super().__init__(options)
        self.snapshot_info = snapshot_info
        self.target_toolchain_path = target_toolchain_path
        self.wasi_sysroot_path = wasi_sysroot_path
        self.swift_sdk_name = swift_sdk_name
        self.target_triple = target_triple

    def run(self):
        build_sdk_path = os.path.join('..', 'build-sdk')
        copy_icu_libs(self.options.scheme, build_sdk_path, self.target_toolchain_path, self.target_triple)
        copy_libxml2_libs(build_sdk_path, self.target_toolchain_path, self.target_triple)
        self.make_swift_sdk(
            self.target_toolchain_path,
            self.wasi_sysroot_path,
            self.swift_sdk_name,
            self.target_triple,
        )

    def make_swift_sdk(
        self,
        target_toolchain_path: str,
        wasi_sysroot_path: str,
        swift_sdk_name: str,
        target_triple: str,
    ):
        """
        Build the Swift SDK for WebAssembly.

        :param target_toolchain_path: The path to the target toolchain, which
            contains the cross-compiled Swift standard library and SDK for
            WebAssembly.
        :param wasi_sysroot_path: The path to the WASI sysroot.
        """
        sdk_generator_args = [
            "swift",
            "run", "--package-path", SDK_GENERATOR_PKG_PATH,
            "--", "swift-sdk-generator", "make-wasm-sdk",
            "--target-swift-package-path", target_toolchain_path,
            "--wasi-sysroot", wasi_sysroot_path,
            "--target", target_triple,
            "--swift-version", self.snapshot_info.swift_version,
            "--sdk-name", swift_sdk_name,
        ]
        print("=====> Building Swift SDK")
        print(" ".join(sdk_generator_args))
        self.system(*sdk_generator_args)

        artifactbundle_path = os.path.join(
            SDK_GENERATOR_PKG_PATH, "Bundles", swift_sdk_name + ".artifactbundle")
        zip_path = os.path.join(
            os.getcwd(), "..", self.snapshot_info.artifactbundle_zip_name)

        # Rename the artifactbundle to be match with the basename of .zip
        # for the quirks of SwiftPM 5.9
        import shutil
        dist_artifactbundle_path = os.path.join(
            os.path.dirname(artifactbundle_path),
            os.path.splitext(os.path.basename(zip_path))[0])
        print(f"=====> Renaming {artifactbundle_path} to "
              f"{dist_artifactbundle_path} for SwiftPM 5.9 issue")
        shutil.rmtree(dist_artifactbundle_path, ignore_errors=True)
        shutil.move(artifactbundle_path, dist_artifactbundle_path)

        if os.path.exists(zip_path):
            print(f"=====> Removing existing .artifactbundle.zip: {zip_path}")
            if not self.options.dry_run:
                os.remove(zip_path)

        print(f"=====> Zipping {dist_artifactbundle_path} to {zip_path}")
        zip_args = [
            "zip", "-r", "-y", "-q", zip_path,
            os.path.basename(dist_artifactbundle_path)
        ]
        old_cwd = os.getcwd()
        os.chdir(os.path.dirname(dist_artifactbundle_path))
        self.system(*zip_args)
        os.chdir(old_cwd)


def derive_toolchain_channel(scheme: str) -> str:
    release_scheme_prefix = "release-"
    if scheme == "main":
        return "DEVELOPMENT"
    elif scheme.startswith(release_scheme_prefix):
        return scheme[len(release_scheme_prefix):]
    else:
        raise Exception(f"Unknown scheme {scheme} to derive toolchain_channel")


def derive_swift_version(daily_snapshot: bool, toolchain_channel: str, now: datetime.datetime) -> str:
    if daily_snapshot:
        return f"{toolchain_channel}-SNAPSHOT-{now.year:04d}-{now.month:02d}-{now.day:02d}-a"
    else:
        return f"{toolchain_channel}-SNAPSHOT"


def derive_date_suffix_from_base_tag(tag: str) -> datetime.datetime:
    # e.g.
    # swift-6.1-DEVELOPMENT-SNAPSHOT-2025-02-07-a -> 2025-02-07-a
    # swift-DEVELOPMENT-SNAPSHOT-2025-02-06-a -> 2025-02-06-a
    """
    Extracts the date suffix from the given tag string.

    Example:
        Input: "swift-6.1-DEVELOPMENT-SNAPSHOT-2025-02-07-a"
        Output: "2025-02-07-a"

        Input: "swift-DEVELOPMENT-SNAPSHOT-2025-02-06-a"
        Output: "2025-02-06-a"

        Input: "swift-6.0.3-RELEASE"
        Output: None
    """
    match = re.search(r"\b((\d{4})-(\d{2})-(\d{2}))-[a-z]$", tag)
    if match is None:
        # If the tag doesn't have a date suffix, return the current date
        # which will be just used as darwin toolchain version.
        return datetime.datetime.utcnow()

    return datetime.datetime.strptime(match.group(1), "%Y-%m-%d")


def main():
    parser = argparse.ArgumentParser(description='A script to create a workspace for a Swift project applying patches')
    parser.add_argument("--daily-snapshot", action="store_true", help="Create a daily snapshot")
    options = derive_options_from_args(sys.argv[1:], parser)
    now = derive_date_suffix_from_base_tag(options.tag)
    actions = [DownloadBaseSnapshotAction(options)]

    packaging_dir = os.path.join(
        os.path.dirname(__file__), '..', '..', '..', 'build', 'Packaging')

    toolchain_channel = derive_toolchain_channel(options.scheme)
    triples = [
        ["wasm32-unknown-wasi", "wasm32-wasi"],
    ]
    if options.scheme not in ["release-6.0"]:
        triples += [
            ["wasm32-unknown-wasip1-threads", "wasm32-wasip1-threads"]
        ]

    # FIXME: Clean up "Bundles" directory before packaging to avoid mixing
    # artifacts from build-script. Eventually we should just use artifactbundles
    # produced from build-script directly.
    import shutil
    shutil.rmtree(
        os.path.join(SDK_GENERATOR_PKG_PATH, "Bundles"), ignore_errors=True)

    for target_triple, short_triple in triples:
        snapshot_info = SnapshotInfo(
            now.year, now.month, now.day,
            swift_version=derive_swift_version(
                options.daily_snapshot, toolchain_channel, now),
            artifact_name=f"swift-wasm-{toolchain_channel}-SNAPSHOT-{target_triple}",
            daily_snapshot=options.daily_snapshot
        )
        actions.append(PackageSwiftSDKAction(
            options, snapshot_info,
            target_toolchain_path=os.path.join(packaging_dir, 'target-toolchain', target_triple),
            wasi_sysroot_path=derive_wasi_sysroot(options, packaging_dir, short_triple),
            swift_sdk_name=f"{snapshot_info.swift_version}-{target_triple}",
            target_triple=target_triple,
        ))

    ActionRunner(actions).run()


if __name__ == '__main__':
    main()
