#!/usr/bin/env python3

import sys
import argparse
import pathlib
import subprocess
from build_support.actions import derive_options_from_args, REPO_ROOT, DownloadBaseSnapshotAction


def default_swift_sdk(options, swift_sdks_path: pathlib.Path):
    """Return the default target triple based on the scheme."""
    import json
    for artifact_bundle in swift_sdks_path.iterdir():
        if not artifact_bundle.is_dir() or not artifact_bundle.name.endswith('.artifactbundle'):
            # Skip if not ending with .artifactbundle
            continue
        info_json = artifact_bundle / 'info.json'
        if not info_json.is_file():
            continue
        try:
            with info_json.open('r') as f:
                info = json.load(f)

            sdk_ids = info.get('artifacts', {}).keys()
            for sdk_id in sdk_ids:
                if sdk_id.endswith("wasm32-unknown-wasip1") or sdk_id.endswith("wasm32-unknown-wasi"):
                    return sdk_id
        except Exception as e:
            print(f"Error reading {info_json}: {e}", file=sys.stderr)
            continue


def main():
    parser = argparse.ArgumentParser(
        description='Run e2e integration tests for Swift SDK')
    parser.add_argument('--swift-sdk', default=None,
                        help='Swift SDK identifier (default: wasm32-unknown-wasip1)')
    parser.add_argument('args', nargs=argparse.REMAINDER,
                        help='Extra arguments to pass to lit.py')
    options = derive_options_from_args(sys.argv[1:], parser)

    extra_lit_args = options.args
    if len(extra_lit_args) > 0 and extra_lit_args[0] == "--":
        extra_lit_args = extra_lit_args[1:]

    repo_path = pathlib.Path(REPO_ROOT)
    base_toolchain_path = DownloadBaseSnapshotAction.toolchain_path(options)
    lit_py_path = repo_path.parent / "llvm-project" / "llvm" / "utils" / "lit" / "lit.py"
    swift_sdks_path = repo_path.parent / "swift-sdk-generator" / "Bundles"
    swift_sdk = options.swift_sdk or default_swift_sdk(options, swift_sdks_path)

    # Build lit command
    lit_cmd = [
        str(lit_py_path),
        "--param", f"swift-sdk={swift_sdk}",
        "--param", f"scheme={options.scheme}",
        "--param", f"base-toolchain-path={base_toolchain_path}",
        "--param", f"swift-sdks-path={swift_sdks_path}",
    ]
    test_dir = repo_path / "test"
    lit_cmd.append(str(test_dir))
    lit_cmd.extend(extra_lit_args)

    print("=====> Running e2e integration tests")
    print(f"Command: {' '.join(lit_cmd)}")

    # Run the tests
    try:
        subprocess.check_call(lit_cmd)
        print("=====> e2e tests completed successfully")
    except subprocess.CalledProcessError as e:
        print(f"=====> e2e tests failed with exit code {e.returncode}")
        sys.exit(e.returncode)


if __name__ == '__main__':
    main()
