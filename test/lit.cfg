# vim: set syntax=python sw=4:

import platform
import os
import shutil

import lit.formats

config.name = "swift-extra-integration-tests"

test_source_root = os.path.dirname(os.path.abspath(__file__))
workspace_root = os.path.dirname(os.path.dirname(test_source_root))

config.test_source_root = os.path.join(test_source_root)
config.test_format = lit.formats.ShTest(execute_external = False)

config.suffixes = [".test", ".swift"]
config.excludes = ["Inputs"]
config.test_exec_root = lit_config.params.get(
    "test-exec-root",
    "/tmp/swift-extra-integration-tests")

config.available_features.add("platform="+platform.system())
config.available_features.add("scheme="+lit_config.params.get("scheme", "main"))

# --param swift-sdk=<swift-sdk-id>
swift_sdk = lit_config.params.get("swift-sdk")
if swift_sdk:
    lit_config.note(f"testing Swift SDK: {swift_sdk}")
else:
    lit_config.warning("'--param swift-sdk=<swift-sdk-id>' is not set, skipping Swift SDK tests")
config.swift_sdk = swift_sdk

# --param swift-sdks-path=<swift-sdks-path>
config.swift_sdks_path = lit_config.params.get("swift-sdks-path")
if config.swift_sdks_path:
    config.swift_sdks_path = os.path.abspath(config.swift_sdks_path)
    lit_config.note(f"using Swift SDKs path: {config.swift_sdks_path}")

# --param base-toolchain-path=PATH
base_toolchain_path = lit_config.params.get("base-toolchain-path")
if base_toolchain_path:
    base_toolchain_path = os.path.abspath(base_toolchain_path)
    lit_config.note(f"using base toolchain: {base_toolchain_path}")
else:
    base_toolchain_path = os.path.abspath(os.path.join(workspace_root, "build", "Packaging", "base-snapshot"))
    lit_config.note(f"using default base toolchain: {base_toolchain_path}")
config.base_toolchain_path = base_toolchain_path

def llvm_tool_path(tool):
    candidates = []
    llvm_bin = lit_config.params.get("llvm-bin")
    if llvm_bin:
        candidates.append(os.path.join(llvm_bin, tool))
    build_bin = os.path.join(workspace_root, "build", "llvm-tools", "bin")
    candidates.append(os.path.join(build_bin, tool))
    for candidate in candidates:
        if os.path.exists(candidate):
            return candidate
    return shutil.which(tool)

maybe_wasmtime = shutil.which("wasmtime")
if maybe_wasmtime:
    config.substitutions.append(('%{wasm_run}', f'{maybe_wasmtime} run'))
else:
    lit_config.warning("cannot find wasmtime, some tests may be disabled")
    config.substitutions.append(('%{wasm_run}', 'echo "wasmtime not found"'))

for llvm_tool in ["FileCheck"]:
    llvm_tool_path_value = llvm_tool_path(llvm_tool)
    if llvm_tool_path_value:
        config.substitutions.append(('%{' + llvm_tool + '}', llvm_tool_path_value))
        config.available_features.add(llvm_tool)
    else:
        lit_config.warning(f"cannot find {llvm_tool}, some tests may be disabled")
