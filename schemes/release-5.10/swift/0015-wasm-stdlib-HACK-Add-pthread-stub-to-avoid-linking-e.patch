From da933f595b3699de354421242bb3c15671786299 Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Tue, 20 Jun 2023 09:45:10 +0000
Subject: [PATCH] [wasm][stdlib] HACK: Add pthread stub to avoid linking error

This is a hack to avoid missing pthread symbols error when linking. But
we now have `SWIFT_STDLIB_SINGLE_THREADED_RUNTIME` mode so the hack should
not be necessary anymore.
---
 stdlib/public/CMakeLists.txt                  |   4 +
 .../Resources/wasi/static-executable-args.lnk |   1 +
 stdlib/public/WASI/CMakeLists.txt             |   4 +
 stdlib/public/WASI/Pthread.cpp                | 153 ++++++++++++++++++
 4 files changed, 162 insertions(+)
 create mode 100644 stdlib/public/WASI/CMakeLists.txt
 create mode 100644 stdlib/public/WASI/Pthread.cpp

diff --git a/stdlib/public/CMakeLists.txt b/stdlib/public/CMakeLists.txt
index a080c874711..6c6883a6475 100644
--- a/stdlib/public/CMakeLists.txt
+++ b/stdlib/public/CMakeLists.txt
@@ -142,6 +142,10 @@ if(SWIFT_BUILD_STDLIB)
   add_subdirectory(core)
   add_subdirectory(SwiftOnoneSupport)
 
+  if(WASI IN_LIST SWIFT_SDKS)
+    add_subdirectory(WASI)
+  endif()
+
   if(SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING)
     add_subdirectory(Differentiation)
   endif()
diff --git a/stdlib/public/Resources/wasi/static-executable-args.lnk b/stdlib/public/Resources/wasi/static-executable-args.lnk
index 1500f94f891..a18d5fc3668 100644
--- a/stdlib/public/Resources/wasi/static-executable-args.lnk
+++ b/stdlib/public/Resources/wasi/static-executable-args.lnk
@@ -1,5 +1,6 @@
 -static
 -lswiftSwiftOnoneSupport
+-lswiftWasiPthread
 -ldl
 -lstdc++
 -lm
diff --git a/stdlib/public/WASI/CMakeLists.txt b/stdlib/public/WASI/CMakeLists.txt
new file mode 100644
index 00000000000..0d088443ad7
--- /dev/null
+++ b/stdlib/public/WASI/CMakeLists.txt
@@ -0,0 +1,4 @@
+add_swift_target_library(swiftWasiPthread STATIC IS_STDLIB
+  Pthread.cpp
+  TARGET_SDKS WASI
+  INSTALL_IN_COMPONENT stdlib)
diff --git a/stdlib/public/WASI/Pthread.cpp b/stdlib/public/WASI/Pthread.cpp
new file mode 100644
index 00000000000..5a64d9bdb4c
--- /dev/null
+++ b/stdlib/public/WASI/Pthread.cpp
@@ -0,0 +1,153 @@
+// SPDX-License-Identifier: 0BSD
+// prototypes taken from opengroup
+#include <stdlib.h>
+#include <stdio.h>
+#include <pthread.h>
+#include <semaphore.h>
+
+#define STUB() do {fprintf(stderr, "FakePthread: unsupported %s\n", __func__);abort();}while(0)
+
+// mutexes: just no-ops
+
+int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr) {
+	return 0;
+}
+
+int pthread_mutex_destroy(pthread_mutex_t *mutex) {
+	return 0;
+}
+
+int pthread_mutexattr_init(pthread_mutexattr_t *attr) {
+	return 0;
+}
+
+int pthread_mutexattr_destroy(pthread_mutexattr_t *attr) {
+	return 0;
+}
+
+int pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *type) {
+	return 0;
+}
+
+int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type) {
+	return 0;
+}
+
+int pthread_mutex_lock(pthread_mutex_t *mutex) {
+	return 0;
+}
+
+int pthread_mutex_trylock(pthread_mutex_t *mutex) {
+	return 0;
+}
+
+int pthread_mutex_unlock(pthread_mutex_t *mutex) {
+	return 0;
+}
+
+// pthread_cond: STUB
+
+int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr) {
+	return 0;
+}
+
+int pthread_cond_destroy(pthread_cond_t *cond) {
+	return 0;
+}
+
+int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex) {
+	STUB();
+}
+
+int pthread_cond_timedwait(pthread_cond_t *cond, 
+    pthread_mutex_t *mutex, const struct timespec *abstime) {
+	STUB();
+}
+
+int pthread_cond_broadcast(pthread_cond_t *cond) {
+	return 0;
+}
+
+int pthread_cond_signal(pthread_cond_t *cond) {
+	return 0;
+}
+
+// tls
+
+int pthread_key_create(pthread_key_t *key, void (*destructor)(void*)) {
+	STUB();
+}
+
+void *pthread_getspecific(pthread_key_t key) {
+	STUB();
+}
+
+int pthread_setspecific(pthread_key_t key, const void *value) {
+	STUB();
+}
+
+// threads
+
+pthread_t pthread_self() {
+	return (pthread_t)1234;
+}
+
+#undef pthread_equal
+
+int pthread_equal(pthread_t t1, pthread_t t2) {
+	return t1 == t2;
+}
+
+int pthread_join(pthread_t thread, void **value_ptr) {
+	STUB();
+}
+
+int pthread_detach(pthread_t thread) {
+	STUB();
+}
+
+int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg) {
+	return 0;
+}
+
+// once
+
+int pthread_once(pthread_once_t *once_control, void (*init_routine)(void)) {
+	STUB();
+}
+
+// rwlock
+
+int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr) {
+	return 0;
+}
+
+int pthread_rwlock_destroy(pthread_rwlock_t *rwlock) {
+	return 0;
+}
+
+int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock) {
+	return 0;
+}
+
+int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock) {
+	return 0;
+}
+
+int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock) {
+	return 0;
+}
+
+int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock) {
+	return 0;
+}
+
+int pthread_rwlock_unlock(pthread_rwlock_t *rwlock) {
+	return 0;
+}
+
+// named semaphores
+
+sem_t *sem_open(const char *name, int oflag, ...) {
+	STUB();
+}
-- 
2.40.0

