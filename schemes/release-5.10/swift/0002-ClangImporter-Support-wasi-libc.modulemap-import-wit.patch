From a11041f37625d9b81b6ff03b8b523967b9bc55ed Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Sat, 10 Jun 2023 14:51:49 +0000
Subject: [PATCH] [ClangImporter] Support wasi-libc.modulemap import with VFS

---
 lib/ClangImporter/ClangIncludePaths.cpp | 41 +++++++++++++++++++------
 1 file changed, 31 insertions(+), 10 deletions(-)

diff --git a/lib/ClangImporter/ClangIncludePaths.cpp b/lib/ClangImporter/ClangIncludePaths.cpp
index 697c53b91c1..8faf184a472 100644
--- a/lib/ClangImporter/ClangIncludePaths.cpp
+++ b/lib/ClangImporter/ClangIncludePaths.cpp
@@ -101,6 +101,13 @@ static llvm::Optional<Path> getGlibcModuleMapPath(
                                 /*isArchSpecific*/ true, vfs);
 }
 
+static llvm::Optional<Path> getWASILibcModuleMapPath(
+    SearchPathOptions &Opts, const llvm::Triple &triple,
+    const llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem> &vfs) {
+  return getActualModuleMapPath("wasi-libc.modulemap", Opts, triple,
+                                /*isArchSpecific*/ true, vfs);
+}
+
 static llvm::Optional<Path> getLibStdCxxModuleMapPath(
     SearchPathOptions &opts, const llvm::Triple &triple,
     const llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem> &vfs) {
@@ -195,11 +202,32 @@ static bool shouldInjectGlibcModulemap(const llvm::Triple &triple) {
          triple.isAndroid();
 }
 
+static bool shouldInjectWASILibcModulemap(const llvm::Triple &triple) {
+  return triple.isOSWASI();
+}
+
 static SmallVector<std::pair<std::string, std::string>, 2> getGlibcFileMapping(
     ASTContext &ctx,
     const llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem> &vfs) {
   const llvm::Triple &triple = ctx.LangOpts.Target;
-  if (!shouldInjectGlibcModulemap(triple))
+
+  std::string auxiliaryHeaderName;
+  llvm::Optional<Path> maybeActualModuleMapPath;
+  if (shouldInjectGlibcModulemap(triple)) {
+    auxiliaryHeaderName = "SwiftGlibc.h";
+    maybeActualModuleMapPath = getGlibcModuleMapPath(ctx.SearchPathOpts, triple, vfs);
+  } else if (shouldInjectWASILibcModulemap(triple)) {
+    auxiliaryHeaderName = "SwiftWASILibc.h";
+    maybeActualModuleMapPath = getWASILibcModuleMapPath(ctx.SearchPathOpts, triple, vfs);
+  } else {
+    return {};
+  }
+
+  Path actualModuleMapPath;
+  if (auto path = maybeActualModuleMapPath)
+    actualModuleMapPath = path.value();
+  else
+    // FIXME: Emit a warning of some kind.
     return {};
 
   // Extract the Glibc path from Clang driver.
@@ -225,24 +253,17 @@ static SmallVector<std::pair<std::string, std::string>, 2> getGlibcFileMapping(
     return {};
   }
 
-  Path actualModuleMapPath;
-  if (auto path = getGlibcModuleMapPath(ctx.SearchPathOpts, triple, vfs))
-    actualModuleMapPath = path.value();
-  else
-    // FIXME: Emit a warning of some kind.
-    return {};
-
   // TODO: remove the SwiftGlibc.h header and reference all Glibc headers
   // directly from the modulemap.
   Path actualHeaderPath = actualModuleMapPath;
   llvm::sys::path::remove_filename(actualHeaderPath);
-  llvm::sys::path::append(actualHeaderPath, "SwiftGlibc.h");
+  llvm::sys::path::append(actualHeaderPath, auxiliaryHeaderName);
 
   Path injectedModuleMapPath(glibcDir);
   llvm::sys::path::append(injectedModuleMapPath, "module.modulemap");
 
   Path injectedHeaderPath(glibcDir);
-  llvm::sys::path::append(injectedHeaderPath, "SwiftGlibc.h");
+  llvm::sys::path::append(injectedHeaderPath, auxiliaryHeaderName);
 
   return {
       {std::string(injectedModuleMapPath), std::string(actualModuleMapPath)},
-- 
2.40.0

