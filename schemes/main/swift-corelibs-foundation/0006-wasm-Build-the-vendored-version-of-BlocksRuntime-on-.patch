From 27efb0c4dcc1de3669bd7adf8a9a7b42f4c6cf80 Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Wed, 7 Aug 2024 05:40:24 +0000
Subject: [PATCH] [wasm] Build the vendored version of BlocksRuntime on WASI

We had been using the vendored BlocksRuntime on WASI, but the build
configuration was removed during the recore. This change restores the
vendored BlocksRuntime build configuration on WASI.
---
 .../BlockRuntime/CMakeLists.txt               | 37 +++++++++++++++++++
 Sources/CoreFoundation/CMakeLists.txt         |  6 +++
 Sources/_CFXMLInterface/CMakeLists.txt        |  4 ++
 3 files changed, 47 insertions(+)
 create mode 100644 Sources/CoreFoundation/BlockRuntime/CMakeLists.txt

diff --git a/Sources/CoreFoundation/BlockRuntime/CMakeLists.txt b/Sources/CoreFoundation/BlockRuntime/CMakeLists.txt
new file mode 100644
index 00000000..afcd826a
--- /dev/null
+++ b/Sources/CoreFoundation/BlockRuntime/CMakeLists.txt
@@ -0,0 +1,37 @@
+##===----------------------------------------------------------------------===##
+##
+## This source file is part of the Swift open source project
+##
+## Copyright (c) 2024 Apple Inc. and the Swift project authors
+## Licensed under Apache License v2.0
+##
+## See LICENSE.txt for license information
+## See CONTRIBUTORS.md for the list of Swift project authors
+##
+## SPDX-License-Identifier: Apache-2.0
+##
+##===----------------------------------------------------------------------===##
+
+# Build the vendored version of the BlocksRuntime library, which is used by
+# platforms that don't support libdispatch.
+
+add_library(BlocksRuntime
+    data.c
+    runtime.c)
+
+target_include_directories(BlocksRuntime PUBLIC
+    ${CMAKE_CURRENT_SOURCE_DIR}/include
+    # For CFTargetConditionals.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/../include)
+
+set_target_properties(BlocksRuntime PROPERTIES
+    POSITION_INDEPENDENT_CODE FALSE)
+
+add_library(BlocksRuntime::BlocksRuntime ALIAS BlocksRuntime)
+
+if(NOT BUILD_SHARED_LIBS)
+    set_property(GLOBAL APPEND PROPERTY Foundation_EXPORTS BlocksRuntime)
+    install(TARGETS BlocksRuntime
+        ARCHIVE DESTINATION lib/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>/${SWIFT_SYSTEM_NAME}
+        LIBRARY DESTINATION lib/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>/${SWIFT_SYSTEM_NAME})
+endif()
diff --git a/Sources/CoreFoundation/CMakeLists.txt b/Sources/CoreFoundation/CMakeLists.txt
index e366005f..c73891b2 100644
--- a/Sources/CoreFoundation/CMakeLists.txt
+++ b/Sources/CoreFoundation/CMakeLists.txt
@@ -118,6 +118,12 @@ target_link_libraries(CoreFoundation
         _FoundationICU
         dispatch)
 
+if(CMAKE_SYSTEM_NAME STREQUAL WASI)
+    # On WASI, we use vendored BlocksRuntime instead of the one from libdispatch
+    add_subdirectory(BlockRuntime)
+    target_link_libraries(CoreFoundation PRIVATE BlocksRuntime)
+endif()
+
 set_property(GLOBAL APPEND PROPERTY Foundation_EXPORTS CoreFoundation)
 
 # Copy Headers to known directory for direct client (XCTest) test builds
diff --git a/Sources/_CFXMLInterface/CMakeLists.txt b/Sources/_CFXMLInterface/CMakeLists.txt
index d550a520..9ca0c279 100644
--- a/Sources/_CFXMLInterface/CMakeLists.txt
+++ b/Sources/_CFXMLInterface/CMakeLists.txt
@@ -33,6 +33,10 @@ target_link_libraries(_CFXMLInterface PRIVATE
     dispatch
     LibXml2::LibXml2)
 
+if(CMAKE_SYSTEM_NAME STREQUAL WASI)
+    target_link_libraries(_CFXMLInterface PRIVATE BlocksRuntime)
+endif()
+
 if(NOT BUILD_SHARED_LIBS)
     set_property(GLOBAL APPEND PROPERTY Foundation_EXPORTS _CFXMLInterface)
     install(TARGETS _CFXMLInterface
-- 
2.43.2

