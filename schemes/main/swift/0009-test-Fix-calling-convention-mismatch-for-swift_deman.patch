From 55babf002797f1a0ba10a04dacda9e7214d45e2e Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Tue, 20 Jun 2023 08:17:12 +0000
Subject: [PATCH] [test] Fix calling convention mismatch for swift_demangle

`test/stdlib/Runtime.swift.gyb` calls `swift_demangle` with the Swift
calling convention, but the functions is defined with the C calling
convention. But this does not cause a problem other than testing, and
ideal fix would be to put `@_cdecl` on the function declared in
Swift-side to choose the correct calling convention. `@cdecl` without
body is not supported yet but discussed in https://forums.swift.org/t/formalizing-cdecl/40677
---
 stdlib/public/runtime/Demangle.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/stdlib/public/runtime/Demangle.cpp b/stdlib/public/runtime/Demangle.cpp
index 7b593612949..0f614cbb889 100644
--- a/stdlib/public/runtime/Demangle.cpp
+++ b/stdlib/public/runtime/Demangle.cpp
@@ -910,6 +910,7 @@ swift::_swift_buildDemanglingForMetadata(const Metadata *type,
 /// \returns the demangled name. Returns nullptr if the input String is not a
 /// Swift mangled name.
 SWIFT_RUNTIME_EXPORT
+SWIFT_CC(swift)
 char *swift_demangle(const char *mangledName,
                      size_t mangledNameLength,
                      char *outputBuffer,
-- 
2.40.0

