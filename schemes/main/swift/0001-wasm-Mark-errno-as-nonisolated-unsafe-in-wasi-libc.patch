From 1fa232de1d1da9b434e2686c8a30021a579b25ae Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Sat, 10 Aug 2024 14:40:44 +0000
Subject: [PATCH] [wasm] Mark `errno` as nonisolated(unsafe) in wasi-libc

This patch is a workaround to reflect the fact that `errno` is thread-local
and can be accessed from any actor. This is a temporary solution until we
have `__swift_attr__` support in apinotes or `thread_local` support in
ClangImporter.

This change is required to build swift-corelibs-foundation with Swift 6
language mode.
---
 test/stdlib/WASILibcAPI.swift                 | 19 ++++++++++
 .../products/wasisysroot.py                   | 35 ++++++++++++++++++-
 2 files changed, 53 insertions(+), 1 deletion(-)
 create mode 100644 test/stdlib/WASILibcAPI.swift

diff --git a/test/stdlib/WASILibcAPI.swift b/test/stdlib/WASILibcAPI.swift
new file mode 100644
index 00000000000..fe599bb9f38
--- /dev/null
+++ b/test/stdlib/WASILibcAPI.swift
@@ -0,0 +1,19 @@
+// RUN: %target-swift-frontend -typecheck -swift-version 6 %s -verify
+// REQUIRES: executable_test
+// REQUIRES: OS=wasi
+
+import WASILibc
+
+// errno is a global thread-local variable, so it should be accessible
+// from any context.
+
+enum TestErrno {
+  static func testSyncContext() {
+    _ = errno
+    errno = 0
+  }
+  static func testAsyncContext() async {
+    _ = errno
+    errno = 0
+  }
+}
diff --git a/utils/swift_build_support/swift_build_support/products/wasisysroot.py b/utils/swift_build_support/swift_build_support/products/wasisysroot.py
index e780809ff38..77c57c0e8bb 100644
--- a/utils/swift_build_support/swift_build_support/products/wasisysroot.py
+++ b/utils/swift_build_support/swift_build_support/products/wasisysroot.py
@@ -58,6 +58,7 @@ class WASILibc(product.Product):
 
         sysroot_build_dir = WASILibc.sysroot_build_path(
             build_root, host_target, target_triple)
+        sysroot_install_dir = WASILibc.sysroot_install_path(build_root, target_triple)
         # FIXME: Manually create an empty dir that is usually created during
         # check-symbols. The directory is required during sysroot installation step.
         os.makedirs(os.path.join(sysroot_build_dir, "share"), exist_ok=True)
@@ -74,7 +75,7 @@ class WASILibc(product.Product):
             '-C', self.source_dir,
             'OBJDIR=' + os.path.join(self.build_dir, 'obj-' + thread_model),
             'SYSROOT=' + sysroot_build_dir,
-            'INSTALL_DIR=' + WASILibc.sysroot_install_path(build_root, target_triple),
+            'INSTALL_DIR=' + sysroot_install_dir,
             'CC=' + os.path.join(clang_tools_path, 'clang'),
             'AR=' + os.path.join(llvm_tools_path, 'llvm-ar'),
             'NM=' + os.path.join(llvm_tools_path, 'llvm-nm'),
@@ -82,6 +83,38 @@ class WASILibc(product.Product):
             'TARGET_TRIPLE=' + target_triple,
         ])
 
+        # FIXME(katei): Workaround to access `errno` without actor isolation.
+        # Remove the workaround once we fixed
+        # https://github.com/swiftlang/swift/issues/75819 or
+        # https://github.com/swiftlang/swift/issues/75820
+        errno_patch = """diff --git a/__errno.h b/__errno.h
+index 4fd983a..7e9e2d9 100644
+--- a/__errno.h
++++ b/__errno.h
+@@ -5,6 +5,15 @@
+ extern "C" {
+ #endif
+
++// BEGIN SWIFT PATCH
++#if __swift__
++// NOTE: Mark errno as nonisolated(unsafe) so that it can be accessed from any
++// actor. This is a workaround until we have one of the following:
++// - `__swift_attr__` support in apinotes
++// - `thread_local` support in ClangImporter
++__attribute__((__swift_attr__("nonisolated(unsafe)")))
++#endif
++// END SWIFT PATCH
+ #ifdef __cplusplus
+ extern thread_local int errno;
+ #else
+        """
+        to_patch = os.path.join(sysroot_install_dir, "include", "__errno.h")
+        import tempfile
+        with tempfile.NamedTemporaryFile(mode='w') as f:
+            f.write(errno_patch)
+            f.flush()
+            shell.call(["patch", to_patch, f.name])
+
     @classmethod
     def get_dependencies(cls):
         return [llvm.LLVM]
-- 
2.43.2

