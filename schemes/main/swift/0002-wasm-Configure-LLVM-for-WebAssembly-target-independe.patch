From b361f701dbc9c50732b2b32dc4e2bc42e02149c1 Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Thu, 19 Sep 2024 04:45:51 +0000
Subject: [PATCH 2/2] [wasm] Configure LLVM for WebAssembly target
 independently from the native LLVM build

We have been using the host LLVM build directory to configure the Wasm
Swift stdlib. This has been working fine so far as the stdlib build is
configured with `CMAKE_SYSTEM_NAME` having host system name. However,
we fixed the stdlib build to use `WASI` as the system name properly in
the previous commit. This exposed the issue that the host LLVM build
directory is not suitable for configuring the stdlib build.
---
 .../products/wasmstdlib.py                    | 49 ++++++++++++++++---
 1 file changed, 43 insertions(+), 6 deletions(-)

diff --git a/utils/swift_build_support/swift_build_support/products/wasmstdlib.py b/utils/swift_build_support/swift_build_support/products/wasmstdlib.py
index d042fc38038..8a81103f561 100644
--- a/utils/swift_build_support/swift_build_support/products/wasmstdlib.py
+++ b/utils/swift_build_support/swift_build_support/products/wasmstdlib.py
@@ -17,6 +17,8 @@ from . import llvm
 from . import swift
 from . import wasisysroot
 from . import wasmkit
+from .. import cmake
+from .. import shell
 
 
 class WasmStdlib(cmake_product.CMakeProduct):
@@ -39,13 +41,48 @@ class WasmStdlib(cmake_product.CMakeProduct):
         return self.args.test_wasmstdlib
 
     def build(self, host_target):
-        self._build(host_target, 'wasm32-wasi')
+        self._build(host_target, 'wasm32-wasi', 'wasi-wasm32')
 
-    def _build(self, host_target, target_triple):
+    def _build(self, host_target, target_triple, short_triple):
+        llvm_build_dir = self._configure_llvm(target_triple, short_triple)
+        llvm_cmake_dir = os.path.join(llvm_build_dir, 'lib', 'cmake', 'llvm')
+        self._build_stdlib(host_target, target_triple, llvm_cmake_dir)
+
+    def _configure_llvm(self, target_triple, short_triple):
+        # Configure LLVM for WebAssembly target independently
+        # from the native LLVM build to turn off zlib and libxml2
+        build_root = os.path.dirname(self.build_dir)
+        build_dir = os.path.join(
+            build_root, 'llvm-%s' % short_triple)
+        llvm_source_dir = os.path.join(
+            os.path.dirname(self.source_dir), 'llvm-project', 'llvm')
+        cmake_options = cmake.CMakeOptions()
+        cmake_options.define('CMAKE_BUILD_TYPE:STRING', self._build_variant)
+        cmake_options.define('CMAKE_SYSTEM_NAME:STRING', 'WASI')
+        cmake_options.define('CMAKE_SYSTEM_PROCESSOR:STRING', 'wasm32')
+        cmake_options.define('UNIX:BOOL', 'TRUE')
+        cmake_options.define('LLVM_ENABLE_ZLIB:BOOL', 'FALSE')
+        cmake_options.define('LLVM_ENABLE_LIBXML2:BOOL', 'FALSE')
+
+        llvm_cmake = cmake.CMake(
+            self.args, self.toolchain, prefer_native_toolchain=True)
+        # Only configure LLVM, not build it because we just need
+        # LLVM CMake functionalities
+        shell.call(["env", self.toolchain.cmake, "-B", build_dir]
+                   + list(llvm_cmake.common_options(self))
+                   + list(cmake_options)
+                   + [llvm_source_dir])
+        return build_dir
+
+    def _build_stdlib(self, host_target, target_triple, llvm_cmake_dir):
         self.cmake_options.define('CMAKE_INSTALL_PREFIX:PATH', '/usr')
         self.cmake_options.define('CMAKE_BUILD_TYPE:STRING', self._build_variant)
+        # Teach about the WebAssembly target. UNIX is explicitly set to TRUE
+        # as CMake still doesn't recognize WASI as a UNIX platform and the
+        # variable is used in LLVM CMake configuration.
         self.cmake_options.define('CMAKE_SYSTEM_NAME:STRING', 'WASI')
         self.cmake_options.define('CMAKE_SYSTEM_PROCESSOR:STRING', 'wasm32')
+        self.cmake_options.define('UNIX:BOOL', 'TRUE')
         self.cmake_options.define(
             'SWIFT_STDLIB_BUILD_TYPE:STRING', self._build_variant)
 
@@ -71,9 +108,6 @@ class WasmStdlib(cmake_product.CMakeProduct):
         self.cmake_options.define('SWIFT_WASI_SYSROOT_PATH:STRING',
                                   self._wasi_sysroot_path(target_triple))
 
-        # It's ok to use the host LLVM build dir just for CMake functionalities
-        llvm_cmake_dir = os.path.join(self._host_llvm_build_dir(
-            host_target), 'lib', 'cmake', 'llvm')
         self.cmake_options.define('LLVM_DIR:PATH', llvm_cmake_dir)
 
         # Standalone stdlib configuration
@@ -90,6 +124,9 @@ class WasmStdlib(cmake_product.CMakeProduct):
         self.cmake_options.define('SWIFT_BUILD_STATIC_STDLIB:BOOL', 'TRUE')
         self.cmake_options.define('SWIFT_BUILD_DYNAMIC_STDLIB:BOOL', 'FALSE')
         self.cmake_options.define('SWIFT_BUILD_STATIC_SDK_OVERLAY:BOOL', 'TRUE')
+        # TODO: Turn off library evolution once we establish a good way to teach
+        # libraries including swift-testing whether to use the stable ABI.
+        self.cmake_options.define('SWIFT_STDLIB_STABLE_ABI:BOOL', 'TRUE')
         self.cmake_options.define('SWIFT_STDLIB_TRACING:BOOL', 'FALSE')
         self.cmake_options.define('SWIFT_STDLIB_HAS_ASLR:BOOL', 'FALSE')
         self.cmake_options.define('SWIFT_STDLIB_CONCURRENCY_TRACING:BOOL', 'FALSE')
@@ -200,7 +237,7 @@ class WasmStdlib(cmake_product.CMakeProduct):
 
 class WasmThreadsStdlib(WasmStdlib):
     def build(self, host_target):
-        self._build(host_target, 'wasm32-wasip1-threads')
+        self._build(host_target, 'wasm32-wasip1-threads', 'wasip1-threads-wasm32')
 
     def should_test_executable(self):
         # TODO(katei): Enable tests once WasmKit supports WASI threads
-- 
2.46.0

