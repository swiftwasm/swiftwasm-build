From 47a67685996d90bf0a296f1cae32db9b411991f1 Mon Sep 17 00:00:00 2001
From: Yuta Saito <ysaito22@apple.com>
Date: Tue, 24 Oct 2023 01:23:21 +0000
Subject: [PATCH] Fix calling convention mismatch for debugger utility
 functions

This is the 3rd attempt to fix the mismatch, where the actual definition
(e.g. `swift_retainCount`) are defined with C calling-convention and the
callers wrongly expect Swift calling-convention.

The 1st fix broke ABI compatibility by introducing new symbol references
from app-side without any availability checks.
The 2nd fix broke lldb's retain counting feature due to new x-ref to
Clang module in serialized function body by `@_alwaysEmitIntoClient`.

This attemps to avoid introducing serialized x-ref to Clang module by
using new `@extern(c)` attribute.

Co-authored-by: Karoy Lorentey <klorentey@apple.com>
---
 stdlib/public/core/CMakeLists.txt             |  1 +
 stdlib/public/core/DebuggerSupport.swift      | 40 ++++++++++++++++---
 .../stability-stdlib-abi-without-asserts.test |  9 +++++
 3 files changed, 44 insertions(+), 6 deletions(-)

diff --git a/stdlib/public/core/CMakeLists.txt b/stdlib/public/core/CMakeLists.txt
index 8bbfa84c21e..bff58501b00 100644
--- a/stdlib/public/core/CMakeLists.txt
+++ b/stdlib/public/core/CMakeLists.txt
@@ -300,6 +300,7 @@ list(APPEND swift_stdlib_compile_flags "-Xfrontend" "-enable-experimental-concis
 
 list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "Macros")
 list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "FreestandingMacros")
+list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "Extern")
 
 set(swift_core_incorporate_object_libraries)
 list(APPEND swift_core_incorporate_object_libraries swiftRuntime)
diff --git a/stdlib/public/core/DebuggerSupport.swift b/stdlib/public/core/DebuggerSupport.swift
index ef9eafeab81..9a0857ff45b 100644
--- a/stdlib/public/core/DebuggerSupport.swift
+++ b/stdlib/public/core/DebuggerSupport.swift
@@ -268,10 +268,38 @@ public func _stringForPrintObject(_ value: Any) -> String {
 
 public func _debuggerTestingCheckExpect(_: String, _: String) { }
 
+@_alwaysEmitIntoClient @_transparent
+internal func _withHeapObject<R>(
+  of object: AnyObject,
+  _ body: (UnsafeMutableRawPointer) -> R
+) -> R {
+  defer { _fixLifetime(object) }
+  let unmanaged = Unmanaged.passUnretained(object)
+  return body(unmanaged.toOpaque())
+}
+
+@extern(c, "swift_retainCount") @usableFromInline
+internal func _swift_retainCount(_: UnsafeMutableRawPointer) -> Int
+@extern(c, "swift_unownedRetainCount") @usableFromInline
+internal func _swift_unownedRetainCount(_: UnsafeMutableRawPointer) -> Int
+@extern(c, "swift_weakRetainCount") @usableFromInline
+internal func _swift_weakRetainCount(_: UnsafeMutableRawPointer) -> Int
+
 // Utilities to get refcount(s) of class objects.
-@_silgen_name("swift_retainCount")
-public func _getRetainCount(_ Value: AnyObject) -> UInt
-@_silgen_name("swift_unownedRetainCount")
-public func _getUnownedRetainCount(_ Value: AnyObject) -> UInt
-@_silgen_name("swift_weakRetainCount")
-public func _getWeakRetainCount(_ Value: AnyObject) -> UInt
+@backDeployed(before: SwiftStdlib 9999)
+public func _getRetainCount(_ object: AnyObject) -> UInt {
+  let count = _withHeapObject(of: object) { _swift_retainCount($0) }
+  return UInt(bitPattern: count)
+}
+
+@backDeployed(before: SwiftStdlib 9999)
+public func _getUnownedRetainCount(_ object: AnyObject) -> UInt {
+  let count = _withHeapObject(of: object) { _swift_unownedRetainCount($0) }
+  return UInt(bitPattern: count)
+}
+
+@backDeployed(before: SwiftStdlib 9999)
+public func _getWeakRetainCount(_ object: AnyObject) -> UInt {
+  let count = _withHeapObject(of: object) { _swift_weakRetainCount($0) }
+  return UInt(bitPattern: count)
+}
diff --git a/test/api-digester/stability-stdlib-abi-without-asserts.test b/test/api-digester/stability-stdlib-abi-without-asserts.test
index 25c6ae709cb..c8dada1b02b 100644
--- a/test/api-digester/stability-stdlib-abi-without-asserts.test
+++ b/test/api-digester/stability-stdlib-abi-without-asserts.test
@@ -51,6 +51,15 @@ Func _prespecialize() is a new API without @available attribute
 Func _stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:) is a new API without @available attribute
 Func _diagnoseUnavailableCodeReached() is a new API without @available attribute
 
+// These functions are not actually added to the ABI, but they had been a part of
+// the ABI exposed by the runtime library, so this is not breakage.
+// They are now referenced by @extern(c) declarations in the standard library, but
+// api-digester cannot match them with the baseline symbols in the baseline runtime
+// library, which were not exposed by the baseline stdlib module.
+Func _swift_retainCount(_:) is a new API without @available attribute
+Func _swift_unownedRetainCount(_:) is a new API without @available attribute
+Func _swift_weakRetainCount(_:) is a new API without @available attribute
+
 Func Collection.removingSubranges(_:) has been removed
 Func Collection.subranges(of:) has been removed
 Func Collection.subranges(where:) has been removed
-- 
2.40.0

