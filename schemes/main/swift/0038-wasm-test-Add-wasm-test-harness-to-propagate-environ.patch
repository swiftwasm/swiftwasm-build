From be6fb5626bcd8ebf5367906ba640185d88df14df Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Tue, 20 Jun 2023 09:26:56 +0000
Subject: [PATCH] [wasm][test] Add wasm test harness to propagate environment
 vars

---
 test/lit.cfg                  |  5 ++--
 utils/webassembly/wasm-run.py | 54 +++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 2 deletions(-)
 create mode 100755 utils/webassembly/wasm-run.py

diff --git a/test/lit.cfg b/test/lit.cfg
index 3c4aa7f0c2e..4c065b709dd 100644
--- a/test/lit.cfg
+++ b/test/lit.cfg
@@ -345,7 +345,6 @@ config.swift_demangle_yamldump = inferSwiftBinary('swift-demangle-yamldump')
 config.swift_demangle = inferSwiftBinary('swift-demangle')
 config.benchmark_o = inferSwiftBinary('Benchmark_O')
 config.benchmark_driver = inferSwiftBinary('Benchmark_Driver')
-config.wasmer = inferSwiftBinary('wasmer')
 config.wasm_ld = inferSwiftBinary('wasm-ld')
 config.swift_plugin_server = inferSwiftBinary('swift-plugin-server')
 
@@ -1870,7 +1869,9 @@ elif run_os == 'wasi':
         config.swift_test_options, config.swift_frontend_test_options])
     subst_target_swift_frontend_mock_sdk = config.target_swift_frontend
     subst_target_swift_frontend_mock_sdk_after = ""
-    config.target_run = '%s run --backend cranelift --' % config.wasmer
+    config.target_run = os.path.join(config.swift_utils, 'webassembly', 'wasm-run.py')
+    config.target_env_prefix = 'WASM_RUN_CHILD_'
+
     if 'interpret' in lit_config.params:
         use_interpreter_for_simple_runs()
     config.target_sil_opt = (
diff --git a/utils/webassembly/wasm-run.py b/utils/webassembly/wasm-run.py
new file mode 100755
index 00000000000..e59f95ebf3c
--- /dev/null
+++ b/utils/webassembly/wasm-run.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+import argparse
+import os
+import subprocess
+import sys
+
+
+def collect_wasm_env(local_env=os.environ, prefix='WASM_RUN_CHILD_'):
+    return dict((key[len(prefix):], value)
+                for key, value in local_env.items() if key.startswith(prefix))
+
+
+class WasmtimeRunner(object):
+    def __init__(self):
+        pass
+
+    def run(self, args):
+        command = self.invocation(args)
+        if args.verbose:
+            print(' '.join(command), file=sys.stderr)
+
+        if not args.dry_run:
+            subprocess.check_call(command)
+
+    def invocation(self, args):
+        command = ["wasmtime", "run"]
+        envs = collect_wasm_env()
+        for key in envs:
+            command.append("--env")
+            command.append(f"{key}={envs[key]}")
+        command.append("--")
+        command.extend(args.command)
+        return command
+
+
+def main():
+    parser = argparse.ArgumentParser()
+
+    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose',
+                        help='print commands as they are run')
+    parser.add_argument('-n', '--dry-run', action='store_true', dest='dry_run',
+                        help="print the commands that would have been run, but"
+                             " don't actually run them")
+    parser.add_argument('command', nargs=argparse.REMAINDER,
+                        help='the command to run', metavar='command...')
+
+    args = parser.parse_args()
+    runner = WasmtimeRunner()
+    runner.run(args)
+
+
+if __name__ == "__main__":
+    main()
-- 
2.40.0

